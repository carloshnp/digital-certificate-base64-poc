import express from 'express';
import ViteExpress from "vite-express";
import forge from 'node-forge';
import cors from 'cors';
import fs from 'fs';
import https from 'https';
import * as tls from 'tls';

const app = express();
const port = 8081;

const corsOptions = {
    origin: '*', // Replace with your frontend domain
    optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204
  };

app.use(cors(corsOptions));

// Load your server's certificate and private key
const options = {
  key: fs.readFileSync('private_key.pem'),
  cert: fs.readFileSync('certificate.pem'),
  requestCert: true, // Request client certificate
  rejectUnauthorized: true, // Reject connections without a valid client cert
};

// Create HTTPS server with Express app
const server = https.createServer(options, app);

app.get('/api/certificate', (req, res) => {
  // Get the client's certificate
  const clientCert = (req.socket as tls.TLSSocket).getPeerCertificate(false); // false to get the cert as an object

  if (clientCert) {
    try {
      // Convert the certificate to PEM format using node-forge
      const pemCert = forge.pki.certificateToPem(
        forge.pki.certificateFromAsn1(forge.asn1.fromDer(clientCert.raw as Buffer))
      );

      // Convert the PEM certificate to a base64 string
      const base64Cert = Buffer.from(pemCert).toString('base64');

      // Print the base64 encoded certificate
      console.log('Client Certificate (Base64):', base64Cert);

      // Respond to the client (you can send base64Cert to another API here)
      res.send('Certificate received and processed!\n');

    } catch (error) {
      console.error('Error processing certificate:', error);
      res.status(500).send('Internal Server Error\n');
    }
  } else {
    console.log('No client certificate provided.');
    res.status(401).send('Unauthorized\n');
  }
});

// Start the server
server.listen(port, () => {
    console.log(`Server listening on port ${port}`);
  });

ViteExpress.bind(app, server);
